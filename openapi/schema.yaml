openapi: 3.0.0
info:
  title: Chatter REST API Docs
  version: 1.0.0
  description: This is a simple CRUD API application made with Express and documented with Swagger
tags: 
  - name: general
  - name: authentication
  - name: settings
  - name: chat
paths:
  /health:
    get:
      tags: 
        - general
      summary: Health check
      responses:
        "200":
          $ref: '#/components/responses/Ok'

  /register:
    post:
      tags: 
        - authentication
      summary: Register a new User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mike@gmail.com
                username:
                  type: string
                  example: mike11
                password:
                  type: string
                  example: password123
                  minLength: 5
              required:
                - email
                - username
                - password
      responses:
        "201":
          $ref: '#/components/responses/Created'

        "400":
          $ref: '#/components/responses/BadRequest'

  /login:
    post:
      tags: 
        - authentication
      summary: Login as a User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: mike11
                password:
                  type: string
                  example: password123
              required:
                - username
                - password
      responses:
        "200":
          $ref: '#/components/responses/Ok'

        "400":
          $ref: '#/components/responses/BadRequest'
          
        "401":
          $ref: '#/components/responses/Unauthorized'
        
        "404":
          $ref: '#/components/responses/NotFound'

  /authed/avatars:
    get:
      tags: 
        - settings
      summary: Get default avatars and the user's current avatar
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Default avatars and current avatar
          content:
            application/json:
              schema:
                type: object
                properties:
                  defaultAvatars:
                    type: array
                    items:
                      $ref: '#/components/schemas/Avatar'
                  currentAvatar:
                    type: string
                    example: 'avatar-1'
                required:
                  - defaultAvatars
                  - currentAvatar
        "400":
          $ref: '#/components/responses/BadRequest'
 
        "401":
          $ref: '#/components/responses/Unauthorized'

  /authed/setAvatar:
    post:
      tags: 
        - settings
      summary: Set an avatar for a User
      security:
        - jwtAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  example: 'avatar-1'
              required:
                - avatar
      responses:
        "200":
          $ref: '#/components/responses/Ok'

        "400":
          $ref: '#/components/responses/BadRequest'

        "401":
          $ref: '#/components/responses/Unauthorized'

        "404":
          $ref: '#/components/responses/NotFound'

  /authed/chatHeads:
    get:
      tags: 
        - chat
      summary: Get chat heads for a given user
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successfully got chat heads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chathead'

        "400":
          $ref: '#/components/responses/BadRequest'

        "401":
          $ref: '#/components/responses/Unauthorized'

  /authed/messages/{threadId}:
    get:
      tags: 
        - chat
      summary: Get messages for a specified thread
      security:
        - jwtAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          description: ID of the thread to get messages from
          schema:
            type: string
      responses:
        "200":
          description: Successfully got messages
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'

        "400":
          $ref: '#/components/responses/BadRequest'

        "401":
          $ref: '#/components/responses/Unauthorized'

  
  /authed/userHeads:
    get:
      tags: 
        - chat
      summary: Get user heads for a given user
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successfully got user heads
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Userhead'

        "400":
          $ref: '#/components/responses/BadRequest'

        "401":
          $ref: '#/components/responses/Unauthorized'


  /authed/message:
    post:
      tags: 
        - chat
      summary: Send a message to a specified chat thread
      security:
        - jwtAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                members: 
                  type: array
                  example: [1, 2]
                  items:
                    type: number
                  minimum: 2
                content:
                  example: "lorem ipsum"
                  type: string
              required:
                - members
                - content
  
      responses:
        "200":
          $ref: '#/components/responses/Ok'

        "400":
          $ref: '#/components/responses/BadRequest'
      
        "401":
          $ref: '#/components/responses/Unauthorized'

  /authed/readThread/{threadId}:
    patch:
      tags: 
        - chat
      summary: Mark a specified thread as read
      security:
        - jwtAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          description: ID of the thread to be marked as read
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Ok'

        "400":
          $ref: '#/components/responses/BadRequest'

        "401":
          $ref: '#/components/responses/Unauthorized'

        "404":
          $ref: '#/components/responses/NotFound'
                      
components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Avatar:
      type: object
      properties:
        name:
          type: string
          example: "avatar-1"
        url:
          type: string
          example: "www.avatar-1.com"
      required:
        - name
        - url

    Chathead:
      type: object
      properties:
        conversationId: 
          type: number
          example: 1
        threadId:
          type: number
          example: 1
        unseenMessageId: 
          type: number
          example: 1
        avatar: 
          $ref: '#/components/schemas/Avatar'
        message: 
          $ref: '#/components/schemas/Message'
      required:
        - conversationId
        - threadId
        - avatar
        - message

    Userhead:
      type: object
      properties:
        userId: 
          type: number
          example: 1
        avatar: 
          $ref: '#/components/schemas/Avatar'
        username: 
          type: string
          example: 'mike11'
      required:
        - userId
        - avatar
        - username

    Message:
      type: object
      properties:
        messageId: 
          type: number
          example: 1
        fromUserId: 
          type: number
          example: 1
        createdAt: 
          type: string
          example: '2024-03-15T10:01:00Z'
        content: 
          type: string
          example: 'lorem ipsum'
      required:
        - messageId
        - fromUserId
        - createdAt
        - content
    
  responses:
    Ok:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Request was successful."
            required: 
              - message
    Created:
      description: Resource created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource created successfully."
            required: 
              - message
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters."
            required: 
              - error
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication is required."
            required: 
              - error
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found."
            required: 
              - error

