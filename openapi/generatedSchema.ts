/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health check */
    get: {
      responses: {
        /** @description Successful health check */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
      };
    };
  };
  "/register": {
    /** Register a new User */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example mike@gmail.com */
            email: string;
            /** @example mike11 */
            username: string;
            /** @example password123 */
            password: string;
          };
        };
      };
      responses: {
        /** @description Successfully created User */
        201: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse201"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
  "/login": {
    /** Login as a User */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example mike11 */
            username: string;
            /** @example password123 */
            password: string;
          };
        };
      };
      responses: {
        /** @description Successfully logged in */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
  "/authed/setAvatar": {
    /** Set an avatar for a User */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example avatar1 */
            avatar: string;
          };
        };
      };
      responses: {
        /** @description Successfully changed avatar */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["InvalidResponse404"];
          };
        };
      };
    };
  };
  "/authed/chatheads": {
    /** Get chat heads for a given user */
    get: {
      responses: {
        /** @description Successfully created message */
        201: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
  "/authed/readThread/{threadId}": {
    /** Mark a specified thread as read */
    get: {
      parameters: {
        path: {
          /** @description ID of the thread to be marked as read */
          threadId: string;
        };
      };
      responses: {
        /** @description Successfully read thread */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
  "/authed/userHeads": {
    /** Get user heads for a given user */
    get: {
      responses: {
        /** @description Successfully got user heads */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
  "/authed/postMessage": {
    /** Send a message to a specified chat thread */
    post: {
      responses: {
        /** @description Successfully got user heads */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessfulResponse200"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["InvalidResponse400"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SuccessfulResponse200: {
      /**
       * @description Error text.
       * @example Successful request
       */
      error: string;
    };
    SuccessfulResponse201: {
      /**
       * @description Error text.
       * @example Created successfully
       */
      error: string;
    };
    InvalidResponse400: {
      /**
       * @description Error text.
       * @example Incorrectly formatted request
       */
      error: string;
    };
    InvalidResponse401: {
      /**
       * @description Error text.
       * @example Specified content was not found
       */
      error: string;
    };
    InvalidResponse404: {
      /**
       * @description Error text.
       * @example Could not find specified resource
       */
      error: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
