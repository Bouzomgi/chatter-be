name: 'Deploy'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-seed]

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  seed-database:
    runs-on: 'ubuntu-latest'
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.x
          cache: npm

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-deployment
          aws-region: us-east-1

      - name: Check ECR Existence
        run: |
          STACK_NAME="CoreStack"
          aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: chatter-seed
          IMAGE_TAG: "latest"
        run: |
          docker build -f Dockerfile.seed -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Check Deployment Existence
        run: |
          STACK_NAME="DynamicStack"
          aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1 || {
              echo "Stack $STACK_NAME not found." && exit 1
          }

      - name: Seed via ECS
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment

      - name: Wait for Service Stability
        run: |
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME
          STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].deployments[0].status' --output text)
          if [ "$STATUS" != "PRIMARY" ]; then
            echo "Deployment failed."
            exit 1
          fi

      - name: Update Deployment
        run: |
          echo "Deployment successful. Service has stabilized."
        