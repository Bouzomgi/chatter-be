name: 'Deploy'
on:
  workflow_dispatch:
  push:
    branches: main

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test-build-deploy:
    runs-on: 'ubuntu-latest'
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.x
          cache: npm

      - name: Install Dependencies
        run: npm ci

        npx prisma generate


      - name: Create Production Build
        run: CI='' npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-deployment
          aws-region: us-east-1

      - name: Sync webserver build to S3
        run: |
          zip -r my-app.zip dist appspec.yml scripts prisma openapi  && \
          aws s3 cp my-app.zip s3://chatter-be

      - name: Create a CodeDeploy deployment
        env:
          PORT: '80'
          DATABASE_URL: 'postgresql://admin:pass@localhost:5432/chatter?schema=public'
          STORAGE_BUCKET_NAME: "local-chatter-storage"
          AWS_S3_ENDPOINT: 'http://0.0.0.0:4566'
          AWS_DEFAULT_REGION: 'us-east-1'
          TOKEN_SECRET: '+B*8nUZLkhdI7cBK+wt.St>3UF=k|5uo5{P@Q=&=VVmnTYCl;A(vwh/)h}!.J8pP'
        run: |
          # Pass the environment variables to CodeDeploy
          aws ssm put-parameter --name "/myapp/PORT" --value "${PORT}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/DATABASE_URL" --value "${DATABASE_URL}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/STORAGE_BUCKET_NAME" --value "${STORAGE_BUCKET_NAME}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/AWS_S3_ENDPOINT" --value "${AWS_S3_ENDPOINT}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/AWS_DEFAULT_REGION" --value "${AWS_DEFAULT_REGION}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/TOKEN_SECRET" --value "${TOKEN_SECRET}" --type "SecureString" --overwrite
          aws ssm put-parameter --name "/myapp/AWS_ACCESS_KEY_ID" --value "${AWS_ACCESS_KEY_ID}" --type "SecureString" --overwrite
          aws ssm put-parameter --name "/myapp/AWS_SECRET_ACCESS_KEY" --value "${AWS_SECRET_ACCESS_KEY}" --type "SecureString" --overwrite

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name chatter \
            --deployment-group-name webserver \
            --s3-location bucket=chatter-be,bundleType=zip,key=my-app.zip \
            --region us-east-1 \
            --file-exists-behavior OVERWRITE \
            --query "deploymentId" \
            --output text)
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV

          

      - name: Wait for CodeDeploy deployment to complete
        run: |
          aws deploy wait deployment-successful \
            --deployment-id ${{ env.deployment_id }} \
            --region us-east-1
          echo "Deployment completed successfully!"