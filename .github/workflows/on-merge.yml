name: 'Deploy'
on:
  workflow_dispatch:
  push:
    branches: main

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test-build-deploy:
    runs-on: 'ubuntu-latest'
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.x
          cache: npm

      # run tests here!

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gha-deployment
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: chatter-be
          IMAGE_TAG: "latest"
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Check Deployment Existence
        id: stack_check
        run: |
          STACK_NAME="DynamicStack"
          aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1
          echo ::set-output name=stack_exists::${?}

      - name: Chicken Nugget
        run: |
          echo "chicken nugget"
          
      # - name: Update Deployment
      #   if: steps.stack_check.outputs.stack_exists == '0'
      #   run: |
      #     aws ecs update-service --cluster ca3 --service appserver-service --force-new-deployment
      #     aws ecs wait services-stable --cluster ca3 --services appserver-service
      #     STATUS=$(aws ecs describe-services --cluster ca3 --services appserver-service --query 'services[0].deployments[0].status' --output text)
      #     if [ "$STATUS" != "PRIMARY" ]; then
      #       echo "Deployment failed."
      #       exit 1
      #     else
      #       echo "Deployment successful."
      #     fi